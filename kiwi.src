
// Kiwi v0.2a
// Author: Svarii
// https://github.com/Svarii/GreyScript/
//Load Libs
    //load crypto.so
        load_lib_crypto = function(cryptoLibLocation = "/lib/crypto.so")
            yield; crypto = include_lib(cryptoLibLocation)
            exeOutput = []    
            if not crypto then
                    push(exeOutput, "> " + activeUser + "@" + computerName + ":~$" + cryptoLibLocation + " not Found")
                    if not cryptools then
                        push(exeOutput, "> " + "Unable to execute. No required libraries found!")
                        return exeOutput.join("\n")
                    end if
            else
                if typeof(crypto) == "cryptoLib" then
                    push(exeOutput, "> " + crypto + " loaded sucessfully")
                    return crypto
                else
                    push(exeOutput, "type: " + typeof(crypto) + " not a cryptoLib library object")
                    return exeOutput.join("\n")
                end if
            end if
        end function

    //load metaxploit.so
        load_lib_metax = function(metaxLibLocation = "/lib/metaxploit.so")
            yield; metax = include_lib(metaxLibLocation)
            exeOutput = []
            if not metax then
                    push(exeOutput, "> "+ active_user + "@" + get_shell.host_computer.get_name + ":~$ " + metaxLibLocation + " not Found")
                    return exeOutput.join("\n")
            else
                if typeof(metax) == "MetaxploitLib" then
                    push(exeOutput, "> " + metax + " loaded sucessfully")
                    return metax; break;
                else
                    push(exeOutput, "type: " + typeof(metax) + " not a MetaxploitLib library object")
                    return exeOutput.join("\n")
                end if
            end if
        end function
//Get paramaters
//string functions
    string.color = function(colorValue = "red")
        return "<color=" + colorValue + ">" + self + "</color>"
    end function
    string.bold = function()
        return "<b>" + self + "</b>"
    end function    
    string.underline = function()
        return "<u>" + self + "</u>"
    end function
    string.italic = function()
        return "<i>" + self + "</i>"
    end function       
//output buffer
    print_list = function(lineList, clearList = false)
    for line in lineList
        print line
    end for
    if clearList == true then globals.output = []
    end function
//print firewall rules
    print_firewall_rules = function(rules)
        locals.output = []
        if not rules then 
            push(locals.output, "Firewall Rules: " + "None Detected".color("green"))
        else
            push(locals.output, "Firewall Rules: ".color("yellow") + firewallRules + " on " + routerPublicIPAddress.underline)
        end if
            return locals.output[0]
    end function

    if params.len == 0 then 
        exit ("kiwi " + "ip_address".bold + " port")
    else if not is_valid_ip(params[0]) then
        exit ("invalid ip address.")
    else if params.len == 2 then
        routerPortToCheck = params[1]
        checkAllPorts = false  
    else
        checkAllPorts = true        
    end if  

    
//Extended Port Scan
    get_port_info = function(portInfo)
        locals.output = []
        locals.portInfo = portInfo
        locals.routerPortToCheck = portInfo.port_number
        locals.lanIPAddress = portInfo.get_lan_ip
            if locals.portInfo.is_closed == true then
                locals.portStatus = "red"
            else
                locals.portStatus = "green"
            end if
        locals.configuredPort = globals.router.port_info(locals.portInfo)
        locals.localAddress = locals.portInfo.get_lan_ip
        //Remove Local IP fro device List
        purgeIndex = 0
        for endpoint in globals.devices
            if trim(endpoint) == trim(locals.localAddress) then
                globals.devices.remove(purgeIndex)
                break
            end if
            if trim(endpoint) == trim(globals.routerIP) then
                globals.devices.remove(purgeIndex)
                break               
            end if
            purgeIndex = purgeIndex + 1
        end for        
        push(locals.output, str(locals.routerPortToCheck).bold.color(locals.portStatus) + ":" + locals.configuredPort.bold + "@" + locals.localAddress.bold)
        if locals.portInfo.is_closed == 1 then
            push(locals.output, char(9) + "can't connect: port closed.")
        else
            locals.splitValues = split(locals.configuredPort, " ")
            locals.portInfo = locals.splitValues[0]
            locals.portVersion = locals.splitValues[1]
            locals.netSession = globals.metax.net_use(globals.routerPublicIPAddress, locals.routerPortToCheck)
        if not locals.netSession == null then locals.extendedPortInfo = char(9) + "FWD:"  + locals.netSession.get_num_portforward + " users:" + locals.netSession.get_num_users + " gateways:" + locals.netSession.get_num_conn_gateway + " | " + "Active:".italic + "{ users:" + locals.netSession.is_any_active_user + " root:" + locals.netSession.is_root_active_user + " }"//else extendedPortInfo = ""
            //exit typeof(locals.netSession)
            if hasIndex(locals, "extendedPortInfo") then
                if not locals.extendedPortInfo == null then push(locals.output, locals.extendedPortInfo)
            else
                push(locals.extendedPortInfo, "Scan Blocked".color("red"))
            end if
        end if
        return join(locals.output, char(9))
    end function
//Declare Variables
    output = []                                 //output buffer
    routerPublicIPAddress = params[0]                   //Router Public IP Address - String
    crypto = load_lib_crypto()                          //cryptoLib object
    metax = load_lib_metax()                            //metaLib object
    //print_list(output, true)                          //Print and clear output buffer
    shell = get_shell                                   //shell object - current system
    computer = shell.host_computer                      //computer object - current system
    //Check computer internet access
         computerNetworkDevice = active_net_card
    router = get_router(routerPublicIPAddress)          //router object - (from public ip - external obtained)
        routerVer = router.kernel_version
        routerName = router.essid_name
        routerID = router.bssid_name
        routerIP = router.local_ip
        devices = router.devices_lan_ip                   //create list of detected local ip addresses on target
        ports = router.used_ports                        //list of port objects from router object ^
    firewallRules = router.firewall_rules                //router firewall rules
    extendedPortInfo = ""                                //string output placeholder
        //Collection whois information
        whoisInformation = {"domain":"", "admin":"", "email":"", "phone":"", "network":""}
        what = split(whois(routerPublicIPAddress), "\n")
        whoisInfo = new whoisInformation
        whoisInfo.domain = split(what[0], ":")[1]
        whoisInfo.admin = split(what[1], ":")[1]
        whoisInfo.email = split(what[2], ":")[1]
        whoisInfo.phone = split(what[3], ":")[1]
        if what.len >= 5 then
            whoisInfo.network = split(what[4], ":")[0]
        else
            whoisInfo.network = "[ UNKNOWN ]"
        end if
//Kiwi Sucessful Load Header
    //Router Firewall Fules
    print char(10)              //Margin
    print print_firewall_rules(firewallRules)

    //Router Passive Network Information
    push(output, "Kiwi".color("#808000") + " loaded v0.2a at " + current_date)
    print_list(output, true)    //Print and clear output buffer

    //Router General Information
    push(output, "ROUTER INFORMATION ".underline.bold + " " + str(devices.len - 1).bold + " connections to " + str(routerIP).bold)
    push(output, char(9) + "Kernel[" + routerVer + "] " + routerID + " "  + routerName)
    print_list(output, true)    //Print and clear output buffer

    push(output, "ADMIN INFORMATION".underline.bold + " " + whoisInfo.network)
    push(output, char(9) + "*" + whoisInfo.domain + " Phone:" + whoisInfo.phone)
    push(output, char(9) + "*" + whoisInfo.admin + "  " + whoisInfo.email)
    //print_list(output, true)

    //Requested (or all) port information
    push(output, "PORT INFORMATION".underline.bold)
    print_list(output, true)

//TODO:FIX THIS BLOCK:IT DOESNT CONFORM

//Detect LAN Information
if checkAllPorts == true then                 
    allPorts = router.used_ports
    for portObject in allPorts
        if typeof(portObject) == "port" then
            push(output, get_port_info(portObject))
        end if
    end for
else if checkAllPorts == false then
    portObject = router.ping_port(params[1].to_int)
    if typeof(portObject) == "port" then
        if portObject == null then 
            exit ("connection failed".color("red") + " port " + routerPortToCheck)
        else   
            push(globals.output, get_port_info(portObject))
        end if
    end if
end if

// TODO: CONTINUE CLEANING CODE HERE

push output, "UNREACHABLE LAN IPS".underline.bold
push output, join(devices, " | ")
print_list(output, true)
exit // exit clean
